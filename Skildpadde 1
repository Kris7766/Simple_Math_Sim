#include <ros/ros.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Char.h>
#include <geometry_msgs/Twist.h>

ros::Subscriber sub_Regnestykke_v1;
ros::Subscriber sub_Regnestykke_v2;
ros::Subscriber sub_Regnestykke_op1;
ros::Publisher pub_Resultat;
ros::Publisher cmd_vel_pub;

int v1, v2, again = 1, mat;
char op1;

std_msgs::Int8 msg_res;

void RegnestykkeCallback_v1(const std_msgs::Int8::ConstPtr& msg)
{
  //ROS_INFO("I heard: [%i]", msg->data);
  v1 = msg->data;
}

void RegnestykkeCallback_v2(const std_msgs::Int8::ConstPtr& msg)
{
  //ROS_INFO("I heard: [%i]", msg->data);
  v2 = msg->data;
}

void RegnestykkeCallback_op1(const std_msgs::Char::ConstPtr& msg)
{
  //ROS_INFO("I heard: [%i]", msg->data);
  op1 = msg->data;

  if (op1 == '+')
  {
    std::cout << v1 << " + " << v2 << " = ";
    mat = v1 + v2;
    std::cout << mat << std::endl;
    
    for (int i = 0; i < v1; i++)
    {
      geometry_msgs::Twist cmd_vel_message;
      cmd_vel_message.angular.z = 0.0;
      cmd_vel_message.linear.x = 1.0;
      cmd_vel_pub.publish(cmd_vel_message);
      ros::Duration(1).sleep();
    }

    for (int i = 0; i < v2; i++)
    {
      geometry_msgs::Twist cmd_vel_message;
      cmd_vel_message.angular.z = 0.0;
      cmd_vel_message.linear.x = 1.0;
      cmd_vel_pub.publish(cmd_vel_message);
      ros::Duration(1).sleep();
    }
  }
  
  if (op1 == '-')
  {
    std::cout << v1 << " - " << v2 << " = ";
    mat = v1 - v2;
    std::cout << mat << std::endl;

    for (int i = 0; i < v1; i++)
    {
      geometry_msgs::Twist cmd_vel_message;
      cmd_vel_message.angular.z = 0.0;
      cmd_vel_message.linear.x = 1.0;
      cmd_vel_pub.publish(cmd_vel_message);
      ros::Duration(1).sleep();
    }

    for (int i = 0; i < v2; i++)
    {
      geometry_msgs::Twist cmd_vel_message;
      cmd_vel_message.angular.z = 0.0;
      cmd_vel_message.linear.x = -1.0;
      cmd_vel_pub.publish(cmd_vel_message);
      ros::Duration(1).sleep();
    }
  }

  if (op1 == '*')
  {
    std::cout << v1 << " * " << v2 << " = ";
    mat = v1 * v2;
    std::cout << mat << std::endl;

    for (int i = 0; i < v2; i++)
    {
      for (int i = 0; i < v1; i++)
      {
        geometry_msgs::Twist cmd_vel_message;
        cmd_vel_message.angular.z = 0.0;
        cmd_vel_message.linear.x = 1.0;
        cmd_vel_pub.publish(cmd_vel_message);
        ros::Duration(1).sleep();
      }
    }
  }

  if (op1 == '/')
  {
    std::cout << v1 << " / " << v2 << " = ";
    mat = v1 / v2;
    std::cout << mat << std::endl;
    
    int div = v1 - (v1 - v1 / v2);
    for (int i = 0; i < v1; i++)
    {
      geometry_msgs::Twist cmd_vel_message;
      cmd_vel_message.angular.z = 0.0;
      cmd_vel_message.linear.x = 1.0;
      cmd_vel_pub.publish(cmd_vel_message);
      ros::Duration(1).sleep();
    }

    for (int i = 0; i < div; i++)
    {
      geometry_msgs::Twist cmd_vel_message;
      cmd_vel_message.angular.z = 0.0;
      cmd_vel_message.linear.x = -1.0;
      cmd_vel_pub.publish(cmd_vel_message);
      ros::Duration(1).sleep();
    }
  }

  msg_res.data = mat;
  ROS_INFO("%i", msg_res.data);
  pub_Resultat.publish(msg_res);
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "Padde1");
  ros::NodeHandle n;
  sub_Regnestykke_v1 = n.subscribe("Regnestykke_v1", 10, RegnestykkeCallback_v1);
  sub_Regnestykke_v2 = n.subscribe("Regnestykke_v2", 10, RegnestykkeCallback_v2);
  sub_Regnestykke_op1 = n.subscribe("Regnestykke_op1", 10, RegnestykkeCallback_op1);
  pub_Resultat = n.advertise<std_msgs::Int8>("Resultat", 10);
  cmd_vel_pub = n.advertise<geometry_msgs::Twist>("/turtle1/cmd_vel", 10);

  ros::spin();

  return 0;
}
