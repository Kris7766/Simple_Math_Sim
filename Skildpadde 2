#include <ros/ros.h>
#include <std_msgs/Int8.h>
#include <geometry_msgs/Twist.h>

ros::Subscriber sub_Resultat;
ros::Publisher cmd_vel_pub;

int mat;

void ResultatCallback(const std_msgs::Int8::ConstPtr& msg)
{
  //ROS_INFO("I heard2: [%i]", msg->data);
  mat = msg->data;
  
  if (mat > 0)
  {
    for (int i; i < mat; i++)
    {
      geometry_msgs::Twist cmd_vel_message;
      cmd_vel_message.angular.z = 0.0;
      cmd_vel_message.linear.x = 1.0;
      cmd_vel_pub.publish(cmd_vel_message);
      ros::Duration(1).sleep();
    }
  }

  if (mat < 0)
  {
    for (int i; i > mat; i--)
    {
      geometry_msgs::Twist cmd_vel_message;
      cmd_vel_message.angular.z = 0.0;
      cmd_vel_message.linear.x = -1.0;
      cmd_vel_pub.publish(cmd_vel_message);
      ros::Duration(1).sleep();
    }
  }
}

int main(int argc, char **argv)
{
  //Makes sure the turtlesim node has enough time before we add the extra turtle.
  ros::Duration(3).sleep();
  //adds the extra turtle.
  system("rosservice call /spawn 5.544445 4.544445 0 turtle2");

  ros::init(argc, argv, "padde2");
  ros::NodeHandle n;

  //Tells the subscriber where to subscribe from, how much and the Callback function to initiate.
  sub_Resultat = n.subscribe("Resultat", 10, ResultatCallback);
  //Tells what type the message is, where to send it "Topic" and how many can be in the topic (messages).
  cmd_vel_pub = n.advertise<geometry_msgs::Twist>("/turtle2/cmd_vel", 10);

  //Makes constantly checks for new input.
  ros::spin();

  return 0;
}
